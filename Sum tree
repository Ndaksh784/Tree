#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};


struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}


int sum(struct Node* root) {
    if (root == NULL)
        return 0;
    return root->data + sum(root->left) + sum(root->right);
}


int isSumTree(struct Node* root) {
    if (root == NULL || (root->left == NULL && root->right == NULL))
        return 1; 
    int leftSum = sum(root->left);
    int rightSum = sum(root->right);

    
    if (root->data == leftSum + rightSum &&
        isSumTree(root->left) &&
        isSumTree(root->right)) {
        return 1;
    }
    return 0;
}


int main() {
    struct Node* root = createNode(26);
    root->left = createNode(10);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(6);
    root->right->right = createNode(3);

    if (isSumTree(root))
        printf("The tree is a sum tree.\n");
    else
        printf("The tree is not a sum tree.\n");

    return 0;
}
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
    
    Node(int val) {
        data = val;
        left = right = nullptr;
    }
};



2nd mehtod

bool isSumTreeUtil(Node* root, int& sum) {
    // If the node is NULL, it's considered a Sum Tree (sum = 0)
    if (root == nullptr) {
        sum = 0;
        return true;
    }
    
    // If it's a leaf node, it satisfies the sum tree property trivially
    if (root->left == nullptr && root->right == nullptr) {
        sum = root->data;
        return true;
    }

    // Recursively check left and right subtrees
    int leftSum = 0, rightSum = 0;
    bool leftIsSumTree = isSumTreeUtil(root->left, leftSum);
    bool rightIsSumTree = isSumTreeUtil(root->right, rightSum);

    // Check if current node satisfies the sum tree property
    bool currentIsSumTree = (leftIsSumTree && rightIsSumTree && (root->data == leftSum + rightSum));

    // Calculate the total sum of this subtree (current node's data + left and right subtree sums)
    sum = root->data + leftSum + rightSum;

    return currentIsSumTree;
}

bool isSumTree(Node* root) {
    int sum = 0;
    return isSumTreeUtil(root, sum);
}

int main() {
    Node* root = new Node(26);
    root->left = new Node(10);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(6);
    root->right->right = new Node(3);
    
    if (isSumTree(root)) {
        cout << "The tree is a Sum Tree." << endl;
    } else {
        cout << "The tree is not a Sum Tree." << endl;
    }

    return 0;
}
