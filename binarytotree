#include <stdio.h>
#include <stdlib.h>

// Structure to represent each node of the binary tree
struct TreeNode {
    int data;               // Data part of the node
    struct TreeNode* left;  // Pointer to the left child
    struct TreeNode* right; // Pointer to the right child
};

// Function to create a new tree node
struct TreeNode* createNode(int value) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    newNode->data = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to build a binary tree from an array
struct TreeNode* arrayToTree(int arr[], int n, int i) {
    // Base condition: If index is out of bounds, return NULL
    if (i >= n) {
        return NULL;
    }

    // Create a new node with the current array element
    struct TreeNode* root = createNode(arr[i]);

    // Recursively create the left and right subtrees
    root->left = arrayToTree(arr, n, 2 * i + 1);
    root->right = arrayToTree(arr, n, 2 * i + 2);

    return root;
}

// Function to print the binary tree in in-order traversal
void inorderTraversal(struct TreeNode* root) {
    if (root == NULL) {
        return;
    }
    inorderTraversal(root->left);    // Traverse left subtree
    printf("%d ", root->data);       // Print the current node
    inorderTraversal(root->right);   // Traverse right subtree
}

// Main function
int main() {
    // Input array
    int arr[] = {1, 2, 3, 4, 5, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);

    // Build the binary tree from the array
    struct TreeNode* root = arrayToTree(arr, n, 0);

    // Print the binary tree in in-order traversal
    printf("In-order Traversal of Binary Tree: ");
    inorderTraversal(root);

    return 0;
}
